package handler

import (
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
	_ "github.com/theCompanyDream/user-angular/apps/backend/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/theCompanyDream/user-angular/apps/backend/controller"
	"github.com/theCompanyDream/user-angular/apps/backend/repository"
)

// Initialize the Echo server
func initServer() *echo.Echo {
	// Initialize the database
	if err := repository.InitDB(); err != nil {
		panic("Failed to initialize database: " + err.Error())
	}

	// Create a new Echo server
	server := echo.New()

	// Middleware
	server.Use(middleware.Recover())
	server.Use(middleware.Logger())

	// Swagger documentation
	server.GET("/swagger", echoSwagger.WrapHandler)

	// Routes
	server.GET("/", controller.Home)
	server.GET("/users", controller.GetUsers)
	server.GET("/user/:id", controller.GetUser)
	server.POST("/user", controller.CreateUser)
	server.PUT("/user/:id", controller.UpdateUser)
	server.DELETE("/user/:id", controller.DeleteUser)

	return server
}

// Vercel handler function
func Handler(w http.ResponseWriter, r *http.Request) {
	// Initialize the Echo server
	server := initServer()

	// Use Echo's ServeHTTP method to handle the request
	server.ServeHTTP(w, r)
}