package handler

import (
	"fmt"
	"net/http"
	"os"
	"runtime/debug"
	"sync"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/labstack/gommon/log"
	"github.com/ziflex/lecho"
	"golang.org/x/time/rate"
	"gorm.io/gorm"

	echoSwagger "github.com/swaggo/echo-swagger"
	_ "github.com/theCompanyDream/id-trials/apps/backend/docs" // docs is generated by Swag CLI, you

	"github.com/theCompanyDream/id-trials/apps/backend/controller"
	"github.com/theCompanyDream/id-trials/apps/backend/repository"
)

// Echo instance
var (
	e          *echo.Echo
	echoOnce   sync.Once
	initDBOnce sync.Once
	db         *gorm.DB
)

func initEcho() {
	server := echo.New()

	logger := lecho.New(
		os.Stdout,
		lecho.WithLevel(log.DEBUG),
		lecho.WithTimestamp(),
		lecho.WithCaller(),
	)

	// Middleware setup
	server.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"*"},
		AllowMethods: []string{http.MethodGet, http.MethodPost, http.MethodPut, http.MethodDelete},
	}))
	server.Use(middleware.Recover())
	server.Use(middleware.Logger())
	server.Use(middleware.Gzip())
	server.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(rate.Limit(10))))

	// Adjust routes to include /api prefix
	server.GET("/api/swagger/*", echoSwagger.WrapHandler)
	ulidController := controller.NewUlidController(db)
	uuid4Controller := controller.NewGormUuidController(db)
	nanoIdController := controller.NewGormNanoController(db)
	ksuidController := controller.NewGormKsuidController(db)
	cuidController := controller.NewGormCuidController(db)
	snowController := controller.NewSnowCuidController(db)

	// Middleware
	server.Use(middleware.Recover())
	server.Logger = logger
	server.Use(middleware.RequestID())
	server.Use(middleware.Gzip())
	server.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(rate.Limit(10))))
	// Define main routes
	server.GET("/swagger/*", echoSwagger.WrapHandler)
	server.GET("/", controller.Home)
	server.GET("/ulids", ulidController.GetUsers)
	server.GET("/ulid/:id", ulidController.GetUser)
	server.POST("/ulid", ulidController.CreateUser)
	server.PUT("/ulid/:id", ulidController.UpdateUser)
	server.DELETE("/ulid/:id", ulidController.DeleteUser)
	//uuid
	server.GET("/uuid4", uuid4Controller.GetUsers)
	server.GET("/uuid4/:id", uuid4Controller.GetUser)
	server.POST("/uuid4", uuid4Controller.CreateUser)
	server.PUT("/uuid4/:id", uuid4Controller.UpdateUser)
	server.DELETE("/uuid4/:id", uuid4Controller.DeleteUser)
	//nanoId
	server.GET("/nano", nanoIdController.GetUsers)
	server.GET("/nano/:id", nanoIdController.GetUser)
	server.POST("/nano", nanoIdController.CreateUser)
	server.PUT("/nano/:id", nanoIdController.UpdateUser)
	server.DELETE("/nano/:id", nanoIdController.DeleteUser)
	//ksuid
	server.GET("/ksuid", ksuidController.GetUsers)
	server.GET("/ksuid/:id", ksuidController.GetUser)
	server.POST("/ksuid", ksuidController.CreateUser)
	server.PUT("/ksuid/:id", ksuidController.UpdateUser)
	server.DELETE("/ksuid/:id", ksuidController.DeleteUser)
	//cuid
	server.GET("/cuid", cuidController.GetUsers)
	server.GET("/cuid/:id", cuidController.GetUser)
	server.POST("/cuid", cuidController.CreateUser)
	server.PUT("/cuid/:id", cuidController.UpdateUser)
	server.DELETE("/cuid/:id", cuidController.DeleteUser)

	server.GET("/snow", snowController.GetUsers)
	server.GET("/snow/:id", snowController.GetUser)
	server.POST("/snow", snowController.CreateUser)
	server.PUT("/snow/:id", snowController.UpdateUser)
	server.DELETE("/snow/:id", snowController.DeleteUser)
}

func Handler(w http.ResponseWriter, r *http.Request) {
	// Initialize the database, capturing errors with full stack trace.
	initDBOnce.Do(func() {
		initial_db, err := repository.ServerlessInitDB()
		if err != nil {
			http.Error(w, fmt.Sprintf("Database initialization error: %v\n%s", err, debug.Stack()), http.StatusInternalServerError)
			return
		}
		db = initial_db
	})
	echoOnce.Do(initEcho)

	// Pass the request to Echo's HTTP handler.
	e.ServeHTTP(w, r)
}
