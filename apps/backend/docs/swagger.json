{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/user": {
            "post": {
                "description": "Create a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a user",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Get a user by their ID or username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get a single user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "user_name",
                        "in": "path"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "User Found",
                        "schema": {
                            "$ref": "#/definitions/models.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a user's information by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Updated",
                        "schema": {
                            "$ref": "#/definitions/models.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get a list of users, with optional search, pagination, and limit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get multiple users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search Term",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page Number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Users Found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.UserCreate": {
            "description": "User object contains user information.",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "user_name",
                "user_status"
            ],
            "properties": {
                "department": {
                    "description": "Department is the user's department, can be null",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the user's email address, required, must be a valid email format",
                    "type": "string",
                    "maxLength": 255
                },
                "first_name": {
                    "description": "FirstName is the user's first name, required, between 5 and 50 characters",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "id": {
                    "description": "HashId is the public identifier for the user",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName is the user's last name, required, between 5 and 50 characters",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "user_name": {
                    "description": "UserName is the user's username, required, between 5 and 50 characters",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 5
                },
                "user_status": {
                    "description": "UserStatus is the user's status, required, must be exactly 1 character and contain \"IAT\"",
                    "type": "string",
                    "enum": [
                        "I",
                        "A",
                        "T"
                    ]
                }
            }
        },
        "models.UserDTO": {
            "type": "object",
            "properties": {
                "department": {
                    "description": "Department is the user's department, can be null",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the user's email address, must be a valid email format",
                    "type": "string"
                },
                "first_name": {
                    "description": "FirstName is the user's first name, between 5 and 50 characters",
                    "type": "string"
                },
                "id": {
                    "description": "HashId is the public identifier for the user",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName is the user's last name, between 5 and 50 characters",
                    "type": "string"
                },
                "user_name": {
                    "description": "UserName is the user's username, between 5 and 50 characters",
                    "type": "string"
                },
                "user_status": {
                    "description": "UserStatus is the user's status, must be exactly 1 character and contain \"IAT\"",
                    "type": "string"
                }
            }
        },
        "models.UserUpdate": {
            "type": "object",
            "properties": {
                "department": {
                    "description": "Department is the user's department, can be null",
                    "type": "string"
                },
                "email": {
                    "description": "Email is the user's email address, must be a valid email format",
                    "type": "string",
                    "maxLength": 255
                },
                "first_name": {
                    "description": "FirstName is the user's first name, between 5 and 50 characters",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "id": {
                    "description": "HashId is the public identifier for the user",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName is the user's last name, between 5 and 50 characters",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 3
                },
                "user_name": {
                    "description": "UserName is the user's username, between 5 and 50 characters",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 5
                },
                "user_status": {
                    "description": "UserStatus is the user's status, must be exactly 1 character and contain \"IAT\"",
                    "type": "string",
                    "enum": [
                        "I",
                        "A",
                        "T"
                    ]
                }
            }
        }
    }
}