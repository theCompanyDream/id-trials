definitions:
  models.UserCreate:
    description: User object contains user information.
    properties:
      department:
        description: Department is the user's department, can be null
        type: string
      email:
        description: Email is the user's email address, required, must be a valid
          email format
        maxLength: 255
        type: string
      first_name:
        description: FirstName is the user's first name, required, between 5 and 50
          characters
        maxLength: 255
        minLength: 3
        type: string
      id:
        description: HashId is the public identifier for the user
        type: string
      last_name:
        description: LastName is the user's last name, required, between 5 and 50
          characters
        maxLength: 255
        minLength: 3
        type: string
      user_name:
        description: UserName is the user's username, required, between 5 and 50 characters
        maxLength: 50
        minLength: 5
        type: string
      user_status:
        description: UserStatus is the user's status, required, must be exactly 1
          character and contain "IAT"
        enum:
        - I
        - A
        - T
        type: string
    required:
    - email
    - first_name
    - last_name
    - user_name
    - user_status
    type: object
  models.UserDTO:
    properties:
      department:
        description: Department is the user's department, can be null
        type: string
      email:
        description: Email is the user's email address, must be a valid email format
        type: string
      first_name:
        description: FirstName is the user's first name, between 5 and 50 characters
        type: string
      id:
        description: HashId is the public identifier for the user
        type: string
      last_name:
        description: LastName is the user's last name, between 5 and 50 characters
        type: string
      user_name:
        description: UserName is the user's username, between 5 and 50 characters
        type: string
      user_status:
        description: UserStatus is the user's status, must be exactly 1 character
          and contain "IAT"
        type: string
    type: object
  models.UserUpdate:
    properties:
      department:
        description: Department is the user's department, can be null
        type: string
      email:
        description: Email is the user's email address, must be a valid email format
        maxLength: 255
        type: string
      first_name:
        description: FirstName is the user's first name, between 5 and 50 characters
        maxLength: 255
        minLength: 3
        type: string
      id:
        description: HashId is the public identifier for the user
        type: string
      last_name:
        description: LastName is the user's last name, between 5 and 50 characters
        maxLength: 255
        minLength: 3
        type: string
      user_name:
        description: UserName is the user's username, between 5 and 50 characters
        maxLength: 50
        minLength: 5
        type: string
      user_status:
        description: UserStatus is the user's status, must be exactly 1 character
          and contain "IAT"
        enum:
        - I
        - A
        - T
        type: string
    type: object
info:
  contact: {}
paths:
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: User Created
          schema:
            $ref: '#/definitions/models.UserDTO'
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Create a user
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User Deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Delete a user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get a user by their ID or username
      parameters:
      - description: User ID
        in: path
        name: id
        type: string
      - description: Username
        in: path
        name: user_name
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: User Found
          schema:
            $ref: '#/definitions/models.UserDTO'
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Get a single user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user's information by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: User Updated
          schema:
            $ref: '#/definitions/models.UserDTO'
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Update a user
      tags:
      - user
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of users, with optional search, pagination, and limit
      parameters:
      - description: Search Term
        in: query
        name: search
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page Number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Users Found
          schema:
            items:
              $ref: '#/definitions/models.UserDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: object
      summary: Get multiple users
      tags:
      - user
swagger: "2.0"
